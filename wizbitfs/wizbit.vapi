/* wizbit.vapi generated by valac, do not modify. */

[CCode (cprefix = "Wiz", lower_case_cprefix = "wiz_")]
namespace Wiz {
	[CCode (cheader_filename = "wizbit/bit.h")]
	public class Bit : GLib.Object {
		protected Wiz.BlobStore blobs;
		public Wiz.CommitStore commits;
		public Wiz.CommitBuilder get_commit_builder ();
		public bool has_version (string uuid);
		public Bit (string uuid, string? store_path);
		public Wiz.Version open_version (string uuid);
		public Wiz.Version? primary_tip { owned get; }
		public Wiz.Version? root { owned get; }
		public string store_path { get; construct; }
		public GLib.List<Wiz.Version> tips { owned get; }
		public string uuid { get; construct; }
	}
	[CCode (cheader_filename = "wizbit/blob_store.h")]
	public class Blob : GLib.Object {
		public Blob.from_uuid (Wiz.BlobStore store, string uuid);
		public Blob (Wiz.BlobStore store);
		public GLib.MappedFile read () throws GLib.FileError;
		public void serialize (out void* bufptr, out long size);
		public void set_contents (void* bufptr, long size);
		public void set_contents_from_file (string path) throws GLib.FileError;
		public void write () throws GLib.FileError;
		public bool parsed { get; set; }
		public Wiz.BlobStore store { get; construct; }
		public string uuid { get; set; }
	}
	[CCode (cheader_filename = "wizbit/blob_store.h")]
	public class BlobStore : GLib.Object {
		public bool exists (string uuid);
		public BlobStore (string directory);
		public GLib.MappedFile read (string uuid) throws GLib.FileError;
		public string write (Wiz.Blob obj) throws GLib.FileError;
		public string directory { get; construct; }
	}
	[CCode (cheader_filename = "wizbit/breadthfirst.h")]
	public class BreadthFirstIterator : GLib.Object {
		public void add_version (Wiz.Version v);
		public void add_visited (Wiz.Version v);
		public Wiz.Version get ();
		public GLib.List<Wiz.Version> get_multiple (uint size);
		public void kick_out (Wiz.Version v);
		public BreadthFirstIterator ();
		public bool next ();
		public bool end { get; set; }
	}
	[CCode (ref_function = "wiz_commit_ref", unref_function = "wiz_commit_unref", param_spec_function = "wiz_param_spec_commit", cheader_filename = "wizbit/commit.h")]
	public class Commit {
		public GLib.List<string> parents;
		public void Commit ();
		public Commit ();
		public string blob { get; set; }
		public string committer { get; set; }
		public int timestamp { get; set; }
		public int timestamp2 { get; set; }
		public string uuid { get; set; }
	}
	[CCode (ref_function = "wiz_commit_builder_ref", unref_function = "wiz_commit_builder_unref", param_spec_function = "wiz_param_spec_commit_builder", cheader_filename = "wizbit/commit_builder.h")]
	public class CommitBuilder {
		public void add_parent (Wiz.Version parent);
		public Wiz.Version commit ();
		public CommitBuilder (Wiz.Bit bit);
		public string blob { set; }
		public string committer { set; }
		public int timestamp { set; }
	}
	[CCode (cheader_filename = "wizbit/commit_store.h")]
	public class CommitStore : GLib.Object {
		public string? get_backward (string version_uuid);
		public GLib.List<string> get_backwards (string version_uuid);
		public int get_commits_between_timestamps (int timestamp1, int timestamp2);
		public string? get_forward (string version_uuid);
		public GLib.List<string> get_forwards (string version_uuid);
		public string? get_primary_tip ();
		public string? get_root ();
		public int get_timestamp (string version_uuid);
		public GLib.List<string> get_tips ();
		public bool has_commit (string uuid);
		public Wiz.Commit? lookup_commit (string uuid);
		public CommitStore (string database, string uuid);
		public Wiz.Commit store_commit (Wiz.Commit c);
		public string database { get; construct; }
		public string uuid { get; construct; }
	}
	[CCode (cheader_filename = "wizbit/store.h")]
	public class Store : GLib.Object {
		public Wiz.Bit create_bit ();
		public bool has_bit (string uuid);
		public GLib.List<string> list_bits ();
		public Store (string uuid, string? directory = null);
		public Wiz.Bit open_bit (string uuid);
		public string directory { get; construct; }
		public string uuid { get; construct; }
	}
	[CCode (cheader_filename = "wizbit/version.h")]
	public class Version : GLib.Object {
		public Wiz.CommitBuilder get_commit_builder ();
		public long get_length () throws GLib.FileError;
		public Version (Wiz.Bit bit, string version_uuid);
		public GLib.InputStream read () throws GLib.FileError;
		public char* read_as_string () throws GLib.FileError;
		public Wiz.Bit bit { get; construct; }
		protected string blob_id { get; }
		public GLib.List<Wiz.Version> children { owned get; }
		public string committer { get; }
		public Wiz.Version? next { owned get; }
		public GLib.List<Wiz.Version> parents { owned get; }
		public Wiz.Version? previous { owned get; }
		public int timestamp { get; }
		public string version_uuid { get; construct; }
	}
}
[CCode (cheader_filename = "wizbit/sync.h")]
public class SyncSource : GLib.Object {
	public string grab_blob (string bit_uuid, string version_uuid);
	public string grab_commit (string bit_uuid, string version_uuid);
	public GLib.List<string> list_all_objects () throws GLib.FileError;
	public SyncSource (Wiz.Store store);
	public void search_for_object (string obj);
	public GLib.List<string> search_for_shas (GLib.Queue<string> versions);
	public Wiz.Store store { get; construct; }
}
[CCode (cheader_filename = "wizbit/sync.h")]
public class SyncClient : GLib.Object {
	public SyncClient (Wiz.Store store);
	public void pull (SyncSource server) throws GLib.FileError;
	public Wiz.Store store { get; construct; }
}
[CCode (cheader_filename = "wizbit/utils.h")]
public static string generate_uuid ();
