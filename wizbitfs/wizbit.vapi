/* wizbit.vapi generated by valac, do not modify. */

[CCode (cprefix = "Wiz", lower_case_cprefix = "wiz_")]
namespace Wiz {
	[CCode (cprefix = "WizPrivate", lower_case_cprefix = "wiz_private_")]
	namespace Private {
		[CCode (cheader_filename = "wizbit/commit_store.h")]
		public class CommitStore : GLib.Object {
			public string? get_backward (string version_uuid);
			public GLib.List<string> get_backwards (string version_uuid);
			public int get_commits_between_timestamps (int timestamp1, int timestamp2);
			public string? get_forward (string version_uuid);
			public GLib.List<string> get_forwards (string version_uuid);
			public string? get_primary_tip ();
			public string? get_root ();
			public int get_timestamp (string version_uuid);
			public GLib.List<string> get_tips ();
			public bool has_commit (string uuid);
			public CommitStore (string database, string uuid);
			public void store_blob (string uuid, string stream_name, string hash);
			public string database { get; construct; }
			public string uuid { get; construct; }
		}
	}
	[CCode (cheader_filename = "wizbit/bit.h")]
	public class Bit : GLib.Object {
		public Wiz.Private.CommitStore commits;
		public Wiz.CommitBuilder get_commit_builder ();
		public bool has_version (string uuid);
		public Bit (string uuid, string? store_path);
		public Wiz.Commit open_commit (string uuid);
		public Wiz.Commit? primary_tip { owned get; }
		public Wiz.Commit? root { owned get; }
		public string store_path { get; construct; }
		public GLib.List<Wiz.Commit> tips { owned get; }
		public string uuid { get; construct; }
	}
	[CCode (cheader_filename = "wizbit/breadthfirst.h")]
	public class BreadthFirstIterator : GLib.Object {
		public void add_version (Wiz.Commit v);
		public void add_visited (Wiz.Commit v);
		public Wiz.Commit get ();
		public GLib.List<Wiz.Commit> get_multiple (uint size);
		public void kick_out (Wiz.Commit v);
		public BreadthFirstIterator ();
		public bool next ();
	}
	[CCode (cheader_filename = "wizbit/commit.h")]
	public class Commit : GLib.Object {
		public Wiz.CommitBuilder get_commit_builder ();
		public Commit (Wiz.Bit bit, string version_uuid);
		public Wiz.Bit bit { get; construct; }
		public GLib.List<Wiz.Commit> children { owned get; }
		public string committer { get; }
		public Wiz.Commit? next { owned get; }
		public GLib.List<Wiz.Commit> parents { owned get; }
		public Wiz.Commit? previous { owned get; }
		public Gee.ReadOnlyMap<string,Wiz.File> streams { owned get; }
		public int timestamp { get; }
		public string version_uuid { get; construct; }
	}
	[CCode (ref_function = "wiz_commit_builder_ref", unref_function = "wiz_commit_builder_unref", param_spec_function = "wiz_param_spec_commit_builder", cheader_filename = "wizbit/commit_builder.h")]
	public class CommitBuilder {
		public Gee.HashMap<string,Wiz.File> streams;
		public void add_parent (Wiz.Commit parent);
		public void add_stream (string name, Wiz.File stream);
		public Wiz.Commit commit ();
		public CommitBuilder (Wiz.Bit bit);
		public string committer { set; }
		public int timestamp { set; }
	}
	[CCode (cheader_filename = "wizbit/iterator.h")]
	public class CommitIterator : GLib.Object {
		[CCode (cheader_filename = "wizbit/iterator.h")]
		public static delegate void Gatherer (Wiz.CommitIterator iter, Wiz.Commit v);
		public void append_queue (Wiz.Commit version);
		public void append_visited (Wiz.Commit version);
		public static void breadth_first (Wiz.CommitIterator iter, Wiz.Commit v);
		public static void depth_first (Wiz.CommitIterator iter, Wiz.Commit v);
		public Wiz.Commit get ();
		public bool have_visited (Wiz.Commit version);
		public static void mainline (Wiz.CommitIterator iter, Wiz.Commit v);
		public CommitIterator (Wiz.CommitIterator.Gatherer gather);
		public bool next ();
		public static void no_hunt (Wiz.CommitIterator iter, Wiz.Commit v);
		public void prepend_queue (Wiz.Commit version);
	}
	[CCode (cheader_filename = "wizbit/file.h")]
	public class File : GLib.Object {
		public GLib.OutputStream append_to ();
		public string get_contents () throws GLib.FileError;
		public GLib.MappedFile get_mapped_file ();
		public string get_path ();
		public string hash ();
		public File ();
		public GLib.InputStream read ();
		public GLib.OutputStream replace ();
		public void set_contents (string contents, long length = -1) throws GLib.FileError;
		public string stream_name { get; set; }
	}
	[CCode (cheader_filename = "wizbit/store.h")]
	public class Store : GLib.Object {
		public Wiz.Bit create_bit ();
		public bool has_bit (string uuid);
		public GLib.List<string> list_bits ();
		public Store (string uuid, string? directory = null);
		public Wiz.Bit open_bit (string uuid);
		public string directory { get; construct; }
		public string uuid { get; construct; }
	}
}
[CCode (cheader_filename = "wizbit/sync.h")]
public class SyncSource : GLib.Object {
	public string grab_blob (string bit_uuid, string version_uuid);
	public string grab_commit (string bit_uuid, string version_uuid);
	public GLib.List<string> list_all_objects () throws GLib.FileError;
	public SyncSource (Wiz.Store store);
	public void search_for_object (string obj);
	public GLib.List<string> search_for_shas (GLib.Queue<string> versions);
	public Wiz.Store store { get; construct; }
}
[CCode (cheader_filename = "wizbit/sync.h")]
public class SyncClient : GLib.Object {
	public SyncClient (Wiz.Store store);
	public void pull (SyncSource server) throws GLib.FileError;
	public Wiz.Store store { get; construct; }
}
