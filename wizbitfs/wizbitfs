#! /usr/bin/env python

import fuse
import wizbit
import os, stat, errno

fuse.fuse_python_api = (0, 2)


class WizbitStat(fuse.Stat):

    def __init__(self):
        self.st_mode = 0
        self.st_ino = 0
        self.st_dev = 0
        self.st_nlink = 0
        self.st_uid = os.getuid()
        self.st_gid = os.getgid()
        self.st_size = 0
        self.st_atime = 0
        self.st_mtime = 0
        self.st_ctime = 0


class WizbitDir(object):

    def __init__(self):
        self.children = {}

    def is_dir(self):
        return True

    def get_child(self, path, stack):
        if not path in self.children:
            return None
        child = self.children[path]
        if stack:
            return child.get_child(stack[0], stack[1:])
        return child

    def put_child(self, name, child):
        self.children[name] = child


class WizbitFile(object):

    def is_dir(self):
        return False


class WizbitFs(fuse.Fuse):

    def __init__(self, *args, **kwargs):
        super(WizbitFs, self).__init__(*args, **kwargs)
        self.store = wizbit.Store("uuid", os.path.join(os.path.expanduser('~'), ".wizbit"))
        self.root = WizbitDir()

    def resolve_path(self, path):
        if path == '/':
            return self.root
        parts = path[1:].split(os.sep)
        return self.root.get_child(parts[0], parts[1:])

    def getattr(self, path):
        ent = self.resolve_path(path)

        if not ent:
            return -errno.ENOENT

        st = WizbitStat()
        if ent.is_dir():
            st.st_mode = stat.S_IFDIR | 0755
            st.st_nlink = 2
        else:
            st.st_mode = stat.S_IFREG | 0444
            st.st_nlink = 1
            st.st_size = 9999
        return st

    def readdir(self, path, offset):
        ent = self.resolve_path(path)
        yield fuse.Direntry('.')
        yield fuse.Direntry('..')
        for x in ent.children.keys():
            yield fuse.Direntry(x)

    def rmdir(self, path):
        pass

    def mkdir(self, path, mode):
        print path

    class file_class(object):
        
        def __init__(self, path, flags, *mode):
            self.file = ""
            self.fd = 0

        def read(self, length, offset):
            return "z" * length

        def write(self, buf, offset):
            pass

        def release(self, flags):
            pass

        def fsync(self, isfsyncfile):
            pass

        def flush(self):
            pass

        def fgetattr(self):
            pass

        def ftruncate(self, len):
            pass

        def lock(self, cmd, owner, **kw):
            pass


if __name__ == "__main__":
    server = WizbitFs(version="%prog 1",  usage="./wizbitfs mount_dir", dash_s_do='setsingle')

    a = WizbitFile()
    b = WizbitFile()
    c = WizbitDir()
    c.put_child("a", a)
    c.put_child("b", b)
    d = WizbitFile()
    server.root.put_child("c", c)
    server.root.put_child("d", d)

    server.threaded = False
    server.parse(errex=1)
    server.main()
